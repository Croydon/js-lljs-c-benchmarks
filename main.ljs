
extern window, document, setTimeout,
  Stats, console, Array, undefined, Image, isDown, Math, Date;

let memcheck = require('memcheck');

let requestAnimFrame = (function(){
    return window.requestAnimationFrame       ||
        window.webkitRequestAnimationFrame ||
        window.mozRequestAnimationFrame    ||
        window.oRequestAnimationFrame      ||
        window.msRequestAnimationFrame     ||
        function(callback){
            window.setTimeout(callback, 1000 / 60);
        };
})();

let seed = 124;
Math.random = function () {
    seed = ((seed * 1103515245) + 12345) & 0x7fffffff;
    return seed / 0x7FFFFFFF;
}

let stats;
let canvas = document.getElementById('canvas');
canvas.width = document.body.clientWidth / 2;
canvas.height = document.body.clientHeight / 2;

let ctx = canvas.getContext('2d');

// Sprites

let resourceCache = new Array(1000);
let readyCallbacks = [];

function loadResource(id, url) {
    if(resourceCache[id] === undefined) {
        let img = new Image();
        img.onload = function() {
            resourceCache[id] = img;

            if(isReady()) {
                readyCallbacks.forEach(function(func) {
                    func();
                });
                readyCallbacks = [];
            }
        };
        resourceCache[id] = false;
        img.src = url;
    }
}

function getResource(id) {
    return resourceCache[id];
}

function isReady() {
    let ready = true;
    for(let k in resourceCache) {
        if(!resourceCache[k]) {
            ready = false;
        }
    }
    return ready;
}

function onReady(func) {
    if(isReady()) {
        func();
    }
    else {
        readyCallbacks.push(func);
    }
}

// Util

struct Vec2d {
    float x, y;
}

struct Vec2di {
    int x, y;
}

// Sprites

function debugDrawImage(ctx, img, sx, sy, sw, sh, dx, dy, dw, dh) {
    ctx.drawImage(img, sx, sy, sw, sh, dx, dy, dw, dh);
}

struct Sprite {
    Vec2di offset, size;
    float speed;
    int img;
    int numFrames;
    float _index;
}

function updateSprite(Sprite* sprite, float dt) {
    sprite->_index += sprite->speed * dt;
}

function renderSprite(ctx, Sprite* sprite, int x, int y) {
    renderSpriteClipped(ctx, sprite, x, y, sprite->size.x, sprite->size.y);
}

function renderSpriteClipped(ctx,
                             Sprite* sprite,
                             int x, int y,
                             int clipX, int clipY) {
    let Vec2di *offset = &sprite->offset;
    let Vec2di *size = &sprite->size;
    let img = getResource(sprite->img);

    // We manually reset _index so that it doesn't increase forever
    // and oveflow at some point
    if(sprite->_index > sprite->numFrames) {
        sprite->_index = 0;
    }

    let int frame = sprite->_index;

    ctx.save();
    ctx.translate(x, y);
    ctx.drawImage(img,
                  offset->x + frame * size->x, offset->y,
                  Math.min(size->x, clipX), Math.min(size->y, clipY),
                  0, 0,
                  Math.min(size->x, clipX), Math.min(size->y, clipY));
    ctx.restore();
}

// Entities

struct Entity {
    int type;
    Vec2d pos;
    Vec2di size;
    Sprite *sprite;
}
typedef Entity* EntityPtr;
typedef EntityPtr* EntityPtrPtr;

function renderEntity(Entity *entity) {
    if(entity->sprite) {
        renderSprite(ctx, entity->sprite, entity->pos.x, entity->pos.y);
    }
}

function updateEntity(Entity *entity, float dt) {
    if(entity->type == ENTITY_PLAYER) {
        if(isDown('up')) {
            entity->pos.y = entity->pos.y - 100*dt;
        }

        if(isDown('down')) {
            entity->pos.y = entity->pos.y + 100*dt;
        }

        if(isDown('left')) {
            entity->pos.x = entity->pos.x - 100*dt;
        }

        if(isDown('right')) {
            entity->pos.x = entity->pos.x + 100*dt;
        }
    }

    if(entity->sprite) {
        updateSprite(entity->sprite, dt);
    }
}

function Entity* makeEntity(int type, Sprite *sprite) {
    let Entity *entity = new Entity();
    entity->type = type;
    entity->pos.x = (int)(Math.random() * canvas.width);
    entity->pos.y = (int)(Math.random() * canvas.height);
    entity->size.x = sprite->size.x;
    entity->size.y = sprite->size.y;
    entity->sprite = sprite;

    return entity;
}

// Cells

let int maxEntitiesPerCell = 100;

struct CellList {
    EntityPtr *_list;
    int index;
    bool missed;
}
typedef CellList* CellListPtr;

struct Cells {
    Vec2di size, count;
    int _length;
    CellListPtr *cache;
}

function Cells* makeCells(int w, int h, int numX, int numY) {
    let Cells *cells = new Cells();
    cells->size.x = w;
    cells->size.y = h;
    cells->count.x = numX;
    cells->count.y = numY;
    cells->_length = numX*numY;
    cells->cache = new CellListPtr[cells->_length];

    for(let int i=0; i<cells->_length; i++) {
        let CellList *list = new CellList();
        list->_list = new EntityPtr[maxEntitiesPerCell];
        list->index = 0;
        list->missed = (bool)(false);
        cells->cache[i] = list;
    }

    cellsClear(cells);
    return cells;
}

function cellsClear(Cells *cells) {
    for(let int i=0; i<cells->_length; i++) {
        cells->cache[i]->index = 0;
        cells->cache[i]->missed = (bool)(false);
    }
}

function cellsRelease(Cells *cells) {
    for(let int i=0; i<cells->_length; i++) {
        delete cells->cache[i]->_list;
        delete cells->cache[i];
    }

    delete cells->cache;
}

function cellsAdd(Cells *cells, Entity* entity, float x, float y) {
    let float cellSizeX = cells->size.x / (float)(cells->count.x);
    let float cellSizeY = cells->size.y / (float)(cells->count.y);

    if(x > 0 && y > 0 && x < cells->size.x && y < cells->size.y) {
        let int idx = (cells->count.x *
                       (int)(y / cellSizeY) +
                       (int)(x / cellSizeX));

        let CellList *list = cells->cache[idx];
        if(list->index < maxEntitiesPerCell) {
            list->index = list->index + 1;
            list->_list[list->index - 1] = entity;
        }
        else {
            list->missed = (bool)(true);
        }
    }
}

function CellList* cellsGet(Cells *cells, x, y) {
    let float cellSizeX = cells->size.x / (float)(cells->count.x);
    let float cellSizeY = cells->size.y / (float)(cells->count.y);

    if(x > 0 && y > 0 && x < cells->size.x && y < cells->size.y) {
        let int idx = (cells->count.x *
                       (int)(y / cellSizeY) +
                       (int)(x / cellSizeX));
        return cells->cache[idx];
    }

    return null;
}

function renderDebug() {
    let int cellSizeX = cells->size.x / cells->count.x;
    let int cellSizeY = cells->size.y / cells->count.y;

    for(let int i=0; i<cells->_length; i++) {
        let int x = i % cells->count.x;
        let int y = i / cells->count.x;
        let CellList *list = cells->cache[i];

        if(list->missed) {
            ctx.fillStyle = 'rgba(0, 255, 0, .2)';
        }
        else if(list->index > 0) {
            ctx.fillStyle = 'rgba(255, 0, 0, .2)';
        }

        if(list->missed || list->index > 0) {
            ctx.fillRect(x * cellSizeX,
                         y * cellSizeY,
                         cellSizeX,
                         cellSizeY);
        }

        for(let int j=0; j<list->index; j++) {
            if(list->_list[j] == playerEntity) {

                ctx.fillRect(x * cellSizeX,
                             y * cellSizeY,
                             cellSizeX,
                             cellSizeY);
            }
        }
    }

    for(let int i=0; i<numEntities; i++) {
        let Entity *ent = objects[i];
        ctx.strokeRect(ent->pos.x, ent->pos.y,
                       ent->size.x, ent->size.y);
    }
}

// Game

let int ENTITY_PLAYER = 1;
let int ENTITY_ENEMY = 2;

let int IMG_BOSSES = 1;

let int numEntities = 3000;
let EntityPtr *objects = new EntityPtr[numEntities];
let Cells *cells = makeCells((int)(canvas.width), (int)(canvas.height), 6, 6);

let Sprite *playerSprite = new Sprite();
playerSprite->offset.x = 0;
playerSprite->offset.y = 395;
playerSprite->size.x = 80;
playerSprite->size.y = 35;
playerSprite->speed = 5.0;
playerSprite->img = IMG_BOSSES;
playerSprite->numFrames = 3;
playerSprite->_index = 0;

let Entity *playerEntity = makeEntity(ENTITY_PLAYER, playerSprite);
objects[0] = playerEntity;

for(let int i=1; i<numEntities; i++) {
    let Sprite *enemySprite = new Sprite();
    enemySprite->offset.x = 0;
    enemySprite->offset.y = 111;
    enemySprite->size.x = 240/6;
    enemySprite->size.y = 40;
    enemySprite->speed = 5.0;
    enemySprite->img = IMG_BOSSES;
    enemySprite->numFrames = 6;
    enemySprite->_index = 0;

    objects[i] = makeEntity(ENTITY_ENEMY, enemySprite);
}

function removeObject(entity) {
    for(let int i=0; i<numEntities; i++) {
        if(objects[i] == entity) {
            objects[i] = null;
        }
    }
}

function bool collides(int x, int y, int r, int b, int x2, int y2, int r2, int b2) {
    return !(r <= x2 || x > r2 ||
             b <= y2 || y > b2);
}

function _checkCollisions(Entity *entity, CellList* list) {
    if(list) {
        let float posX = entity->pos.x;
        let float posY = entity->pos.y;
        let int sizeX = entity->size.x;
        let int sizeY = entity->size.y;

        let EntityPtr *ents = list->_list;

        for(let int i=0; i<list->index; i++) {
            if(ents[i] != entity) {
                let Vec2d *pos2 = &(ents[i]->pos);
                let Vec2di *size2 = &(ents[i]->size);

                if(collides(posX, posY,
                            posX + sizeX, posY + sizeY,
                            pos2->x, pos2->y,
                            pos2->x + size2->x, pos2->y + size2->y)) {
                    if(entity == playerEntity) {
                        removeObject(ents[i]);
                    }
                }
            }
        }
    }
}

function checkCollisions() {
    for(let int i=0; i<numEntities; i++) {
        let Entity *ent = objects[i];

        if(ent) {
            _checkCollisions(ent, cellsGet(cells, ent->pos.x, ent->pos.y));
            _checkCollisions(ent, cellsGet(cells,
                                           ent->pos.x,
                                           ent->pos.y + ent->size.y));
            _checkCollisions(ent, cellsGet(cells,
                                           ent->pos.x + ent->size.x,
                                           ent->pos.y));
            _checkCollisions(ent, cellsGet(cells,
                                           ent->pos.x + ent->size.x,
                                           ent->pos.y + ent->size.y));
        }
    }
}

let float last = (float)(Date.now() / 1000);
function heartbeat() {
    let float now = (float)(Date.now() / 1000);

    stats.begin();
    checkCollisions();
    stats.end();

    cellsClear(cells);

    ctx.fillStyle = 'black';
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    for(let int i=0; i<numEntities; i++) {
        let Entity *ent = objects[i];

        if(ent) {
            updateEntity(ent, now - last);
            renderEntity(ent);

            cellsAdd(cells, ent, ent->pos.x, ent->pos.y);
            cellsAdd(cells, ent, ent->pos.x + ent->size.x, ent->pos.y);
            cellsAdd(cells, ent, ent->pos.x, ent->pos.y + ent->size.y);
            cellsAdd(cells, ent,
                     ent->pos.x + ent->size.x,
                     ent->pos.y + ent->size.y);
        }
    }

    //renderDebug();

    last = now;
    requestAnimFrame(heartbeat);
    //finish();
}

function finish() {
    for(let int x=0; x<numEntities; x++) {
        delete objects[x]->sprite;
        delete objects[x];
    }

    delete objects;

    cellsRelease(cells);
    delete cells;

    console.log(memcheck.report());
}

loadResource(IMG_BOSSES, 'resources/bosses.png');

window.addEventListener('load', function() {
    stats = new Stats();
    stats.setMode(1);
    stats.domElement.style.position = 'absolute';
    stats.domElement.style.right = '0px';
    stats.domElement.style.top = '0px';
    document.body.appendChild(stats.domElement);

    document.getElementById('maxEntitiesPerCell').innerHTML = maxEntitiesPerCell;
    document.getElementById('numEntities').innerHTML = numEntities;

    onReady(heartbeat);
});
